#!/usr/bin/env python
# coding: utf-8

import os
import sys
import subprocess

# put your resources dir here
resources_dir = '../res'

resources_template = '''\
<!-- AUTO GENERATED by ../script/gresources-helper -->
<?xml version="1.0" encoding="UTF-8"?>
<gresources>
  <gresource prefix="/">
${resources}
  </gresource>
</gresources>\
'''
resource_file_template = '''\
    <file>${file}</file>\
'''
compile_command = [
    'glib-compile-resources', '--target=resources.cc', '--generate-source',
    'resources.xml'
]

if not os.path.isabs(resources_dir):
    resources_dir = os.path.realpath(
        os.path.join(os.path.dirname(__file__), resources_dir))

if not os.path.exists(resources_dir):
    print(f'"{resources_dir}": does not exist')
    sys.exit(-1)
if not os.path.isdir(resources_dir):
    print(f'"{resources_dir}": not a directory')
    sys.exit(-1)

resource_files = []
for root, dirs, files in os.walk(resources_dir):
    resource_files.extend([
        os.path.relpath(os.path.join(root, file), resources_dir)
        for file in files
        if not (root is resources_dir
                and file in ['resources.xml', 'resources.cc', 'readme.md'])
    ])

resource_xml_file = open(os.path.join(resources_dir, 'resources.xml'), 'w')
resource_xml_file.write(
    resources_template.replace(
        '${resources}', '\n'.join([
            resource_file_template.replace('${file}', file)
            for file in resource_files
        ])))
resource_xml_file.close()

compile_result = subprocess.run(compile_command,
                                capture_output=True,
                                cwd=resources_dir)
if compile_result.returncode != 0:
    print(
        f'Failed to compile resources!\n{compile_result.stdout.decode("utf-8")}\n{compile_result.stderr.decode("utf-8")}'
    )
